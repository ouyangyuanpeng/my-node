import{_ as r,c as a,a as o,o as t}from"./app-CbO9e9FJ.js";const p={};function i(n,e){return t(),a("div",null,e[0]||(e[0]=[o('<p><a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">文档地址</a></p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="name-server" tabindex="-1"><a class="header-anchor" href="#name-server"><span>Name Server</span></a></h3><ol><li><p>它负责管理整个集群的路由信息，提供轻量级的服务发现功能。Name Server 是无状态的，可以水平扩展，以提高系统的可用性和性能。</p></li><li><p>相当于一个服务注册中心，负责管理全部的 Broker，当 Broker 启动时，会向所有 Name Server 发送心跳包，注册自己的地址和状态信息。</p></li><li><p>Name Server 负责管理 Topic 的路由信息，包括哪些 Broker 存储了哪些 Topic 的消息队列。当一个新的 Broker 加入集群或一个 Broker 离线时，Name Server 会更新路由信息，确保生产者和消费者能够正确地找到目标 Broker。</p></li><li><p>存储的是所有 Broker 的路由信息，包括 Master 和 Slave 节点。Name Server 不区分 Master 和 Slave 节点，而是将所有 Broker 的信息都注册到其内部的路由表中。这样，生产者和消费者可以通过 Name Server 获取到完整的 Broker 列表，并根据这些路由信息选择合适的 Broker 进行消息的发送和接收。</p></li><li><p>生产者或者消费者都需要通过 Name Server 来获取对应 Topic 下的 Broker，然后创建连接进行生产消费信息</p></li></ol><p>Name Server 相当于是一个服务注册中心，他可以找到对应的 Broker，也可以找到对应的消费者，通过 Name Server 我们可以找到我们 Broker,，然后进行连接，实际处理消息的是 Broker。</p><p>他可以维护 Topic 和 Broker 的关系，这样的话消费者生产者可以 Name Server 找到想要的 Broker</p><h3 id="broker" tabindex="-1"><a class="header-anchor" href="#broker"><span>Broker</span></a></h3><p>Broker 是 RocketMQ 中的一个重要组件，它负责存储消息、管理消息队列、处理生产者和消费者的请求。Broker 可以分为 Master 节点和 Slave 节点，形成主从架构，以提高系统的可靠性和可用性。</p><p>生产者消费者实际是通过连接 Broker 来生产消费信息</p><h3 id="topic" tabindex="-1"><a class="header-anchor" href="#topic"><span>Topic</span></a></h3><p>是消息的主题，是生产者和消费者之间传递消息的逻辑通道。一个 Topic 可以包含多个消息队列。Topic 包含的队列其实是在 Broker 中</p><p>生产者通过 Name Server 获取到对应 Topic 下的 Broker，通过一些算法获取对应的 Broker，优先是 Master 节点，建立连接，然后发生消息到 Broker 中，Broker 接收到消息后，返回确认响应给生产者</p><p>消费者通过 Name Server 获取到对应 Topic 下的 Broker</p>',13)]))}const c=r(p,[["render",i],["__file","index.html.vue"]]),l=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E6%A0%88/xj4lud05/","title":"RocketMQ","lang":"zh-CN","frontmatter":{"title":"RocketMQ","createTime":"2024/11/14 10:21:26","permalink":"/技术栈/xj4lud05/"},"headers":[],"readingTime":{"minutes":2.16,"words":649},"git":{"updatedTime":1731552696000,"contributors":[{"name":"oyyp","email":"513150165@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/oyyp?v=4","url":"https://github.com/oyyp"}]},"filePathRelative":"notes/技术栈/消息队列/RocketMQ.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"659f61","sort":10003,"name":"技术栈"},{"id":"b341fc","sort":10004,"name":"消息队列"}],"bulletin":false}');export{c as comp,l as data};
