import{_ as s,c as i,a,o as n}from"./app-CbO9e9FJ.js";const r={};function l(t,e){return n(),i("div",null,e[0]||(e[0]=[a(`<p>[官方文档地址](<a href="https://redis.io/docs/latest/develop/data-types/" target="_blank" rel="noopener noreferrer">了解 Redis 数据类型 |文档</a>)</p><h2 id="string-字符串" tabindex="-1"><a class="header-anchor" href="#string-字符串"><span>String（字符串）</span></a></h2><p><a href="https://redis.io/docs/latest/develop/data-types/strings/" target="_blank" rel="noopener noreferrer">Redis 字符串</a>是最基本的 Redis 数据类型，表示一个字节序列。</p><p>默认情况下，单个 Redis 字符串的最大大小为 512 MB。</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># SET key value</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">SET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bike:1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Deimos</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OK</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># GET key</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bike:1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;Deimos&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hash-哈希" tabindex="-1"><a class="header-anchor" href="#hash-哈希"><span>Hash（哈希）</span></a></h2><p>类似 java 中的 hashmap</p><h3 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h3><ul><li><a href="https://redis.io/docs/latest/commands/hset/" target="_blank" rel="noopener noreferrer"><code>HSET：</code></a>设置哈希值上一个或多个字段的值。</li><li><a href="https://redis.io/docs/latest/commands/hget/" target="_blank" rel="noopener noreferrer"><code>HGET：</code></a>返回给定字段的值。</li><li><a href="https://redis.io/docs/latest/commands/hmget/" target="_blank" rel="noopener noreferrer"><code>HMGET：</code></a>返回一个或多个给定字段的值。</li><li><a href="https://redis.io/docs/latest/commands/hincrby/" target="_blank" rel="noopener noreferrer"><code>HINCRBY</code></a>：将给定字段的值增加提供的整数。</li></ul><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># key=redis的key field 相当于map中的 key</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HSET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> key</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> field</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> value</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [field </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ...]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HSET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myhash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> field1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HGET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myhash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> field1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HSET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myhash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> field2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hi</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> field3</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">World</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HGET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myhash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> field2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;Hi&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HGET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myhash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> field3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;World&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><ul><li>购物车 <ul><li>以用户 id 为 key，商品 id 为 field，商品数量为 value</li></ul></li><li>存储对象 <ul><li>比直接用字符串存储对象更加灵活，可以修改对应字段</li><li>一般对象用 string + json 存储，对象中某些频繁变化的属性抽出来用 hash 存储。</li></ul></li><li>计数器（限流）</li></ul><h3 id="底层实现数据结构" tabindex="-1"><a class="header-anchor" href="#底层实现数据结构"><span>底层实现数据结构</span></a></h3><p>hash 的底层存储有两种数据结构，一种是 ziplist，另外一种是 hashtable。</p><p>hash 对象只有同时满足以下条件，才会采用 ziplist 编码：</p><ul><li>hash 对象保存的键和值字符串长度都小于 64 字节</li><li>hash 对象保存的键值对数量小于 512 ziplist 存储的结构如下 <img src="https://image.oyyp.top/img/202411261503216.png" alt="image.png"></li></ul><h2 id="lists-列表" tabindex="-1"><a class="header-anchor" href="#lists-列表"><span>Lists（列表）</span></a></h2><p><a href="https://cloud.tencent.com/developer/article/2463431" target="_blank" rel="noopener noreferrer">Redis 数据结构：List 类型全面解析-腾讯云开发者社区-腾讯云</a></p><ul><li>有序，按照插入顺序排序</li><li>元素可重复</li><li>插入和删除快</li><li>查询速度一般</li><li>列表对于两端的操作性能较高 ,  对于通过索引下标查询元素的性能较低 ;</li><li>是字符串列表</li><li>本质是双向链表  , 可以将字符串元素添加到列表的头部或尾部</li><li>最大长度为 2^32 - 1 （4,294,967,295） 个元素。</li></ul><p>根据 Redis 双向列表的特性，因此其也被用于异步队列的使用。实际开发中将需要延后处理的任务结构体序列化成字符串，放入 Redis 的队列中，另一个线程从这个列表中获取数据进行后续处理。</p><h3 id="基本命令-1" tabindex="-1"><a class="header-anchor" href="#基本命令-1"><span>基本命令</span></a></h3><ul><li><a href="https://redis.io/docs/latest/commands/lpush/" target="_blank" rel="noopener noreferrer"><code>LPUSH</code></a>  将新元素添加到列表的头部;<a href="https://redis.io/docs/latest/commands/rpush/" target="_blank" rel="noopener noreferrer"><code>RPUSH</code></a>  添加到尾部。</li><li><a href="https://redis.io/docs/latest/commands/lpop/" target="_blank" rel="noopener noreferrer"><code>LPOP</code></a>  从列表的头部删除并返回一个元素;<a href="https://redis.io/docs/latest/commands/rpop/" target="_blank" rel="noopener noreferrer"><code>RPOP</code></a>  执行相同的操作，但从列表的尾部开始。</li><li><a href="https://redis.io/docs/latest/commands/llen/" target="_blank" rel="noopener noreferrer"><code>LLEN</code></a>  返回列表的长度。</li><li><a href="https://redis.io/docs/latest/commands/lmove/" target="_blank" rel="noopener noreferrer"><code>LMOVE</code></a>  以原子方式将元素从一个列表移动到另一个列表。</li><li><a href="https://redis.io/docs/latest/commands/lrange/" target="_blank" rel="noopener noreferrer"><code>LRANGE</code></a>  从列表中提取一系列元素。</li><li><a href="https://redis.io/docs/latest/commands/ltrim/" target="_blank" rel="noopener noreferrer"><code>LTRIM</code></a>  将列表缩减到指定的元素范围。</li><li><a href="https://redis.io/docs/latest/commands/blpop/" target="_blank" rel="noopener noreferrer"><code>BLPOP</code></a>  从列表的头部删除并返回一个元素。 如果列表为空，则命令将阻止，直到元素可用或达到指定的超时。</li><li><a href="https://redis.io/docs/latest/commands/blmove/" target="_blank" rel="noopener noreferrer"><code>BLMOVE</code></a>  以原子方式将元素从源列表移动到目标列表。 如果源列表为空，则命令将阻塞，直到有新元素可用。</li></ul><h3 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1"><span>应用场景</span></a></h3><ul><li>实现堆栈和队列。</li><li>消息队列可以利用 List 的 push 和 pop 操作，实现生产者消费者模型。(只支持单消费者，获取消息后处理失败无法恢复)</li><li>时间线、动态消息：比如微博的时间线，可以将最新的内容放在 List 的最前面。</li><li>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等</li></ul><h3 id="底层实现数据结构-1" tabindex="-1"><a class="header-anchor" href="#底层实现数据结构-1"><span>底层实现数据结构</span></a></h3><p>底层由  <strong>快速链表 QuickList</strong> （快速链表是链表和压缩列表结合起来的产物 ） 实现</p><ul><li>在 3.2 版本之前，Redis List 底层采用<strong>压缩链表 ZipList</strong>和<strong>双向链表 LinkedList</strong>来实现 List。当元素数量小于 512 并且元素大小小于 64 字节时采用 ZipList 编码，超过则将自动采用 LinkedList 编码</li><li>在 3.2 版本之后，Redis 统一采用<strong>快速链表 QuickList</strong>来实现 List</li></ul><p>不使用LinkedLis的原因： 使用LinkedList的附加空间相对太高，因为 64bit 系统中指针是 8 个字节，所以 prev 和 next 指针需要占据 16 个字节，且链表节点在内存中单独分配，会加剧内存的碎片化，影响内存管理效率</p><h4 id="压缩列表-ziplist" tabindex="-1"><a class="header-anchor" href="#压缩列表-ziplist"><span>压缩列表 ZipList</span></a></h4><p>ZipList 是一种特殊的“双端链表”（并非链表），由一系列特殊编码的<strong>连续内存块</strong>组成，像内存连续的数组。可以在任意一端进行压入/弹出操作，并且该操作的时间复杂度为 O(1)。</p><p>压缩列表底层数据结构：本质是一个数组，增加了列表长度、尾部偏移量、列表元素个数、以及列表结束标识，有利于快速寻找列表的首尾节点；但对于其他正常的元素，如元素 2、元素 3，只能一个个遍历，效率仍没有很高效。</p><p>当我们的 List 列表数据量比较少的时候，且存储的数据轻量的（如小整数值、短字符串）时候， Redis 就会通过压缩列表来进行底层实现。 ZipList 虽然节省内存，但申请内存必须是连续空间，如果内存占用较多，申请效率较低。</p><p>问题 1：ZipList 虽然节省内存，但申请内存必须是连续空间，如果内存占用较多，申请内存效率很低。怎么办? 为了缓解这个问题，我们必须限制 ZipList 的长度和 entry 大小。</p><p>问题 2：但是我们要存储大量数据，超出了 ZipList 最佳的上限该怎么办? 我们可以创建多个 ZipList 来分片存储数据。</p><p>问题 3：数据拆分后比较分散，不方便管理和查找，这多个 ZipList 如何建立联系? Redis 在 3.2 版本引入了新的数据结构 QuickList，它是一个双端链表，只不过链表中的每个节点都是一个 ZipList。</p><h4 id="快速链表-quicklist" tabindex="-1"><a class="header-anchor" href="#快速链表-quicklist"><span>快速链表 QuickList</span></a></h4><p>QuickList 底层 LinkedList + ZipList，可以从双端访问，内存占用较低，保含多个 ZipList，存储上限高。其特点：</p><ul><li>是一个节点为 ZipList 的双端链表</li><li>节点采用 ZipList，解决了传统链表的内存占用问题</li><li>控制了 ZipList 大小，解决连续内存空间申请效率问题</li><li>中间节点可以压缩，进一步节省了内存(中间节点访问频次低，可以压缩，头尾访问频次高)</li></ul><h2 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合"><span>Set（集合）</span></a></h2><p><a href="https://cloud.tencent.com/developer/article/2343213" target="_blank" rel="noopener noreferrer">Redis 数据结构：Set 类型全面解析-腾讯云开发者社区-腾讯云</a></p><ul><li>唯一，不可重复</li><li>无序</li></ul><h3 id="基本命令-2" tabindex="-1"><a class="header-anchor" href="#基本命令-2"><span>基本命令</span></a></h3><ul><li><a href="https://redis.io/docs/latest/commands/sadd/" target="_blank" rel="noopener noreferrer"><code>SADD</code></a>  将新成员添加到集合中，存在不添加返回。</li><li><a href="https://redis.io/docs/latest/commands/srem/" target="_blank" rel="noopener noreferrer"><code>SREM</code></a>  将从集中删除指定的成员。</li><li><a href="https://redis.io/docs/latest/commands/sismember/" target="_blank" rel="noopener noreferrer"><code>SISMEMBER</code></a>  测试字符串的集成员身份。</li><li><a href="https://redis.io/docs/latest/commands/sinter/" target="_blank" rel="noopener noreferrer"><code>SINTER</code></a>  返回两个或多个集合共有的成员集（即交集）。</li><li><a href="https://redis.io/docs/latest/commands/scard/" target="_blank" rel="noopener noreferrer"><code>SCARD</code></a>  返回集合的大小 （也称为基数） 。</li></ul><p>请参阅  <a href="https://redis.io/docs/latest/commands/?group=set" target="_blank" rel="noopener noreferrer">set 命令的完整列表</a>。</p><h3 id="应用场景-2" tabindex="-1"><a class="header-anchor" href="#应用场景-2"><span>应用场景</span></a></h3><p>常见的应用场景有：投票系统、标签系统、共同好友、共同关注、共同爱好、抽奖、商品筛选栏，访问 IP 统计等</p><ul><li>标签：比如我们博客网站常常使用到的兴趣标签，把一个个有着相同爱好，关注类似内容的用户利用一个标签把他们进行归并。</li><li>统计网站的独立 IP。利用 set 集合当中元素唯一性，可以快速实时统计访问网站的独立 IP。</li><li>执行常见的集操作，例如交集、并集和差集。</li><li>点赞、踩、收藏：Set 类型可以保证一个用户只能点一个赞；</li><li>共同关注、标签：Set 类型支持交集运算，所以可以用来计算共同关注的好友、公众号等；</li><li>抽奖活动：存储某活动中中奖的用户名 ，Set 类型因为有去重功能，可以保证同一个用户不会中奖两次</li></ul><h3 id="底层实现数据结构-2" tabindex="-1"><a class="header-anchor" href="#底层实现数据结构-2"><span>底层实现数据结构</span></a></h3><p>redis 的集合对象 set 的底层存储结构，底层使用了 intset 和 hashtable 两种数据结构存储的，intset 我们可以理解为数组，hashtable 就是普通的哈希表（key 为 set 的值，value 为 null）。</p><p>set 的底层存储 intset 和 hashtable 是存在编码转换的，使用<strong>intset</strong>存储必须满足下面两个条件，否则使用 hashtable，条件如下：</p><ul><li>集合对象保存的所有元素都是整数值</li><li>集合对象保存的元素数量不超过 512 个 （REDIS_SET_MAX_INTSET_ENTRIES 可以配置）</li></ul><h4 id="intset-的数据结构" tabindex="-1"><a class="header-anchor" href="#intset-的数据结构"><span>intset 的数据结构</span></a></h4><p>intset 内部其实是一个数组（int8_t coentents[]数组），而且存储数据的时候是有序（大小排序）的，因为在查找数据的时候是通过二分查找来实现的。</p><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能</span></a></h3><p>大多数集合操作（包括添加、删除和检查项是否为集合成员）都是 O（1）。 这意味着它们的效率很高。 但是，对于具有数十万个或更多成员的大型集，在运行  <a href="https://redis.io/docs/latest/commands/smembers/" target="_blank" rel="noopener noreferrer"><code>SMEMBERS</code></a>  命令时应小心谨慎。 此命令为 O（n） ，并在单个响应中返回整个集合。 作为替代方法，请考虑使用  <a href="https://redis.io/docs/latest/commands/sscan/" target="_blank" rel="noopener noreferrer"><code>SSCAN，</code></a>它允许您以迭代方式检索集的所有成员。</p><h2 id="sorted-set-有序集合" tabindex="-1"><a class="header-anchor" href="#sorted-set-有序集合"><span>Sorted Set（有序集合）</span></a></h2><ul><li>元素唯一且有序</li></ul><h3 id="基本命令-3" tabindex="-1"><a class="header-anchor" href="#基本命令-3"><span>基本命令</span></a></h3><ul><li><a href="https://redis.io/docs/latest/commands/zadd/" target="_blank" rel="noopener noreferrer"><code>ZADD</code></a>  将新成员和关联的分数添加到排序集。如果该成员已存在，则更新分数。</li><li><a href="https://redis.io/docs/latest/commands/zrange/" target="_blank" rel="noopener noreferrer"><code>ZRANGE</code></a>  返回在给定范围内排序的排序集的成员。</li><li><a href="https://redis.io/docs/latest/commands/zrank/" target="_blank" rel="noopener noreferrer"><code>ZRANK</code></a>  返回所提供成员的排名，假设排序按升序排列。</li><li><a href="https://redis.io/docs/latest/commands/zrevrank/" target="_blank" rel="noopener noreferrer"><code>ZREVRANK</code></a>  返回所提供成员的排名，假设排序集按降序排列。</li></ul><p>请参阅<a href="https://redis.io/docs/latest/commands/?group=sorted-set" target="_blank" rel="noopener noreferrer">排序集命令的完整列表</a>。</p><h3 id="应用场景-3" tabindex="-1"><a class="header-anchor" href="#应用场景-3"><span>应用场景</span></a></h3><ul><li>排行榜</li></ul><h3 id="底层实现数据结构-3" tabindex="-1"><a class="header-anchor" href="#底层实现数据结构-3"><span>底层实现数据结构</span></a></h3><p>压缩列表 zipList，与跳跃列表 skipList。这两种实现对于用户来说是透明的，但用户写入不同的数据，系统会自动使用不同的实现。 只有同时满足配置文件 redis.conf 中相关集合元素数量阈值与元素大小阈值两个条件，使用的就是压缩列表 zipList，只要有一个条件不满足使用的就是跳跃列表 skipList。例如，对于 ZSet 集合中这两个条件如下：</p><ul><li>集合元素个数小于 redis.conf 中 zset-max-ziplist-entries 属性的值，其默认值为 128</li><li>每个集合元素大小都小于 redis.conf 中 zset-max-ziplist-value 属性的值，其默认值为 64 字节</li></ul><h4 id="skiplist-跳跃列表" tabindex="-1"><a class="header-anchor" href="#skiplist-跳跃列表"><span>skipList 跳跃列表</span></a></h4><p>skipList，跳跃列表，简称跳表，是一种随机化的数据结构，基于并联的链表，实现简单， 查找效率较高。简单来说跳表也是链表的一种，只不过它在链表的基础上增加了跳跃功能。 也正是这个跳跃功能，使得在查找元素时，能够提供较高的效率。</p><h3 id="性能-1" tabindex="-1"><a class="header-anchor" href="#性能-1"><span>性能</span></a></h3><p>大多数排序集操作是 O（log（n）），其中  <em>n</em>  是成员数。</p><p>在运行具有较大返回值（例如，数万或更多）的  <a href="https://redis.io/docs/latest/commands/zrange/" target="_blank" rel="noopener noreferrer"><code>ZRANGE</code></a>  命令时要小心。 此命令的时间复杂度为 O（log（n） + m），其中  <em>m</em>  是返回的结果数。</p><h2 id="stream-流信息" tabindex="-1"><a class="header-anchor" href="#stream-流信息"><span>Stream（流信息）</span></a></h2><p>Streams 是一种仅追加的数据结构</p><h3 id="基本命令-4" tabindex="-1"><a class="header-anchor" href="#基本命令-4"><span>基本命令</span></a></h3><ul><li><a href="https://redis.io/docs/latest/commands/xadd/" target="_blank" rel="noopener noreferrer"><code>XADD</code></a>  将新条目添加到流中。</li><li><a href="https://redis.io/docs/latest/commands/xread/" target="_blank" rel="noopener noreferrer"><code>XREAD</code></a>  读取一个或多个条目，从给定位置开始并在时间上向前移动。</li><li><a href="https://redis.io/docs/latest/commands/xrange/" target="_blank" rel="noopener noreferrer"><code>XRANGE</code></a>  返回两个提供的条目 ID 之间的条目范围。</li><li><a href="https://redis.io/docs/latest/commands/xlen/" target="_blank" rel="noopener noreferrer"><code>XLEN</code></a>  返回流的长度。</li></ul><p>请参阅  <a href="https://redis.io/docs/latest/commands/?group=stream" target="_blank" rel="noopener noreferrer">stream 命令的完整列表</a>。</p><h3 id="应用场景-4" tabindex="-1"><a class="header-anchor" href="#应用场景-4"><span>应用场景</span></a></h3><ul><li>事件溯源（例如，跟踪用户操作、点击等）</li><li>传感器监控（例如，来自现场设备的读数）</li><li>通知（例如，将每个用户的通知记录存储在单独的数据流中）</li><li>订阅发布</li><li>消息队列</li></ul><h3 id="底层实现数据结构-4" tabindex="-1"><a class="header-anchor" href="#底层实现数据结构-4"><span>底层实现数据结构</span></a></h3><ul><li>Redis <code>Stream</code> 的底层数据结构是基于 <strong>Radix Tree</strong>（压缩字典树）和 <strong>双端链表</strong> 的组合。</li><li><strong>Radix Tree 的作用：</strong><ul><li>用于高效存储 Stream 的消息数据（ID 和消息内容）。</li><li>压缩存储相同前缀的消息 ID，节省内存空间。</li></ul></li></ul><h2 id="geospatial-地理空间" tabindex="-1"><a class="header-anchor" href="#geospatial-地理空间"><span>geospatial（地理空间）</span></a></h2><p>Redis 地理空间索引允许您存储坐标并进行搜索。 此数据结构可用于查找给定半径或边界框内的附近点。</p><h3 id="基本命令-5" tabindex="-1"><a class="header-anchor" href="#基本命令-5"><span>基本命令</span></a></h3><ul><li><a href="https://redis.io/docs/latest/commands/geoadd/" target="_blank" rel="noopener noreferrer"><code>GEOADD</code></a>  将位置添加到给定的地理空间索引中（请注意，此命令的经度位于纬度之前）。</li><li><a href="https://redis.io/docs/latest/commands/geosearch/" target="_blank" rel="noopener noreferrer"><code>GEOSEARCH</code></a>  返回具有给定半径或边界框的位置。</li></ul><p>请参阅<a href="https://redis.io/docs/latest/commands/?group=geo" target="_blank" rel="noopener noreferrer">地理空间索引命令的完整列表</a>。</p><h3 id="应用场景-5" tabindex="-1"><a class="header-anchor" href="#应用场景-5"><span>应用场景</span></a></h3><ul><li>查找附近多少 km 的充电站或者其他</li><li>实时位置</li><li>最近距离，最远距离</li></ul><h3 id="底层数据结构" tabindex="-1"><a class="header-anchor" href="#底层数据结构"><span>底层数据结构</span></a></h3><h2 id="bitmap-位图" tabindex="-1"><a class="header-anchor" href="#bitmap-位图"><span>Bitmap（位图）</span></a></h2><h2 id="bitfields-位域" tabindex="-1"><a class="header-anchor" href="#bitfields-位域"><span>Bitfields（位域）</span></a></h2>`,89)]))}const h=s(r,[["render",l],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E6%A0%88/9qpnhhge/","title":"Redis数据结构","lang":"zh-CN","frontmatter":{"title":"Redis数据结构","createTime":"2025/04/01 14:23:52","permalink":"/技术栈/9qpnhhge/"},"headers":[],"readingTime":{"minutes":11,"words":3299},"git":{"updatedTime":1733307530000,"contributors":[{"name":"oyyp","email":"513150165@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/oyyp?v=4","url":"https://github.com/oyyp"}]},"filePathRelative":"notes/技术栈/Redis/Redis数据结构.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"659f61","sort":10003,"name":"技术栈"},{"id":"5e6003","sort":10007,"name":"Redis"}],"bulletin":false}');export{h as comp,o as data};
