import{_ as i,c as a,a as n,o as l}from"./app-CbO9e9FJ.js";const e={};function t(h,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p>线程上下文切换非常浪费资源，发生线程切换的时候，会利用程序计数器记录当前线程执行到那个指令</p><h2 id="线程状态" tabindex="-1"><a class="header-anchor" href="#线程状态"><span>线程状态</span></a></h2><p>java 中定义了<code>Thread.State</code>枚举中有 6 种状态</p><p>操作系统中线程有 5 种状态</p><ol><li>初始状态，在语言方法创建了线程对象，如 new Thread</li><li>可运行状态，线程已经被创建等待 cpu 调用</li><li>运行状态</li><li>阻塞状态</li><li>终止状态</li></ol><h2 id="sleep-和-yield" tabindex="-1"><a class="header-anchor" href="#sleep-和-yield"><span>sleep 和 yield</span></a></h2><p>sleep 会让线程进入阻塞状态，让出 cpu 片给其他线程执行，阻塞毫秒结束后并不会立马执行，还需要等待分配 cpu 执行时间片 yield 让线程运行状态却换为就绪状态，让出 cpu 时间片给其他同级别优先级的线程，如果没有其他优先级相同的线程，会导致不会让出 cpu 时间片继续执行</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Thread</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()-&gt;{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	    // 获取当前线程的打断标识</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	    boolean</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> interrupt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentThread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">isInterrupted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">interrupt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">		    break</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">t1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">interrupt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>interrupt 打断线程，如果线程在 sleep 会抛出异常，并且会把线程的 interrupt 变成 false，如果线程没有在 sleep 那么会把对应线程的打断标志变成<code>true</code>,线程可以通过这个判断是否停止线程</li></ul><h2 id="线程安全类" tabindex="-1"><a class="header-anchor" href="#线程安全类"><span>线程安全类</span></a></h2><ul><li>Sring</li><li>Integer 等包装类</li><li>StringBuffer</li><li>Random</li><li>Vector</li><li>Hashtable</li><li>java.util.concurrent 包下的类</li></ul><p>这里说它们是线程安全的是指，多个线程调用它们同一个实例的某个方法时，是线程安全的。也可以理解为</p><ul><li>它们的每个方法是原子的</li><li>但注意它们多个方法的组合不是原子的，见后面分析</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Hashtable</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> table</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Hashtable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//线程1，线程2</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">（ </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">table</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">get</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">（</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">key</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">）</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	table</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">put</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">key</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">上面代码会存在线程安全</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">线程1调用get方法后还没有执行put方法</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">线程2开始执行也调用了get方法也没获取到数据</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">线程1和线程2执行put导致重复执行了2次put，value发生了变化</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">原因Hashtable保证了单一方法的原子性，但是多个方法的组合不是原子的</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">因为线程1执行完get后释放了锁，然后线程2又获取了锁</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-包装类" tabindex="-1"><a class="header-anchor" href="#string-包装类"><span>string 包装类</span></a></h3><p>他们是不可变类</p><h2 id="原子性" tabindex="-1"><a class="header-anchor" href="#原子性"><span>原子性</span></a></h2><p><a href="https://worktile.com/kb/p/2102550" target="_blank" rel="noopener noreferrer">参考</a></p><p><strong>原子性</strong>是指在编程中，一个或多个操作在 CPU 执行过程中是不可中断的，即这些操作要么全部完成，要么全部不起作用，没有中间状态。<strong>原子操作</strong>通常需要硬件或操作系统的支持来保证在并发环境中的一致性。</p><p>一组操作指令不可以被中断</p><p>可以这样理解。代码如果是原子性的，那么他的代码执行不会因为线程的上下文切换导致出现并发问题，就算发生了线程的上下文切换其他线程也影响不到具有原子性的代码</p><p>可以想象 redis 的 lua 脚本，lua 脚本中包含多个指令，但是 redis 会把 lua 脚本当作一个整体，执行完这个 lua 脚本才会执行下一个，代码中也是一样，要执行完原子性的代码才会让下一个线程去执行</p><h2 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized"><span>synchronized</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">synchronized</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">对象</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	代码（临界区）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> synchronized</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="monitor" tabindex="-1"><a class="header-anchor" href="#monitor"><span>Monitor</span></a></h3><p>每一个 java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁之后，升级到了重量级锁之后，该对象头的 markword 中就被设置指向 Monitor 指针地址</p><p><img src="https://image.oyyp.top/img/202503231706254.png" alt="image.png"></p><p>在 HotSpot 虚拟机中，Monitor 是基于 C++的<strong>ObjectMonitor 类</strong>实现的，其主要成员包括：</p><ul><li>_owner：指向持有 ObjectMonitor 对象的线程</li><li>_WaitSet：存放处于 wait 状态的线程队列，即调用 wait()方法的线程</li><li>_EntryList：存放处于等待锁 block 状态的线程队列</li><li>_count：约为_WaitSet 和 _EntryList 的节点数之和</li><li>_cxq: 多个线程争抢锁，会先存入这个单向链表</li><li>_recursions: 记录重入次数</li></ul><p><code>_cxq</code>  的定位与作用</p><ul><li>​<strong>用途</strong>：<code>_cxq</code>  是一个单向链表队列，用于存放 ​<strong>首次竞争锁失败</strong>  的线程（如自旋失败后未进入阻塞的线程）。</li><li>​<strong>设计目标</strong>：减少锁竞争时的线程阻塞开销，提高锁分配的吞吐量（尤其在非公平锁模式下）。</li><li>​<strong>与  <code>_EntryList</code>  的区别</strong>： <ul><li><code>_cxq</code>：存放尚未进入阻塞的新竞争线程（未经过唤醒流程）。</li><li><code>_EntryList</code>：存放被唤醒后重新竞争锁的线程（如从  <code>_WaitSet</code>  迁移的线程，或  <code>_cxq</code>  转移来的线程）。</li></ul></li></ul><p>ObjectMonitor 的基本工作机制：</p><p>（1）当多个线程同时访问一段同步代码时，首先会进入 _EntryList 队列中。</p><p>（2）当某个线程获取到对象的 Monitor 后进入临界区域，并把 Monitor 中的 _owner 变量设置为当前线程，同时 Monitor 中的计数器 _count 加 1。即获得对象锁。</p><p>（3）若持有 Monitor 的线程调用 wait() 方法，将释放当前持有的 Monitor，_owner 变量恢复为 null，_count 自减 1，同时该线程进入 _WaitSet 集合中等待被唤醒。</p><p>（4）在_WaitSet 集合中的线程会被再次放到_EntryList 队列中，重新竞争获取锁。</p><p>（5）若当前线程执行完毕也将释放 Monitor 并复位变量的值，以便其他线程进入获取锁。</p><p>ObjectMonitor::enter() 和 ObjectMonitor::exit() 分别是 ObjectMonitor 获取锁和释放锁的方法。线程解锁后还会唤醒之前等待的线程，根据策略选择直接唤醒_cxq 队列中的头部线程去竞争，或者将_cxq 队列中的线程加入_EntryList，然后再唤醒_EntryList 队列中的线程去竞争。</p><p><img src="https://image.oyyp.top/img/202503231708927.png" alt="image.png"></p><h3 id="轻量级锁" tabindex="-1"><a class="header-anchor" href="#轻量级锁"><span>轻量级锁</span></a></h3><p>markword 的锁标志位默认是 01，</p><ul><li>01 代表没有锁</li><li>00 轻量锁</li></ul><p>加锁过程： 当线程尝试进入  <code>synchronized</code>  代码块的时候，线程内部的栈帧中会生成一个内存区域叫做 lockrecord，里面保存了锁对象的 markword 内容的拷贝 然后通过 cas 尝试去更新对象的 markword，修改 markword 指向当前线程 lockrecord 的指针和修改标志位为 00 如果更新失败了可能出现两种情况：</p><ol><li>检查当前 markword 是否指向当前线程 lockrecord，如果是就再加一个 lockrecord（可重入锁），然后指向代码</li><li>如果没有指向当前线程 lockrecord，说明存在锁竞争，进入锁膨胀流程</li></ol><p>解锁过程： 检查是否还是指向当前线程那就通过CAS操作把之前拷贝在lockrecord中的还原，还原成功代表解锁成功， 如果替换失败说明有其他线程尝试获取锁，进入重量级锁解锁流程</p><h3 id="​锁的膨胀与优化" tabindex="-1"><a class="header-anchor" href="#​锁的膨胀与优化"><span>​锁的膨胀与优化</span></a></h3><p><code>ObjectMonitor</code>  是“重量级锁”的实现，但 HotSpot 通过锁膨胀策略优化性能：</p><ol><li>​<strong>无锁状态</strong>：初始时对象头标记为无锁（Mark Word 未关联 Monitor）。</li><li>​<strong>偏向锁</strong>：单个线程重复获取锁时，对象头标记偏向该线程（避免 CAS）。</li><li>​<strong>轻量级锁</strong>：多个线程轻度竞争时，通过 CAS 和自旋尝试获取锁。</li><li>​<strong>重量级锁</strong>：竞争激烈时，对象头关联  <code>ObjectMonitor</code>，线程进入  <code>_EntryList</code>  阻塞。</li></ol><h3 id="加锁流程-以重量级锁为例-​" tabindex="-1"><a class="header-anchor" href="#加锁流程-以重量级锁为例-​"><span>加锁流程（以重量级锁为例）​</span></a></h3><p>当线程尝试进入  <code>synchronized</code>  代码块且锁已升级为重量级锁时，流程如下：</p><p>通过 cas 尝试去更新对象的 markword，发现没有指向当前线程 lockrecord，说明存在锁竞争。 就会为对象申请Monitor对象然后修改对象的 markword指向Monitor，然后把自己加入到_EntryList中</p><h4 id="​1-尝试快速获取锁" tabindex="-1"><a class="header-anchor" href="#​1-尝试快速获取锁"><span>​1. 尝试快速获取锁</span></a></h4><ul><li><p>​<strong>检查  <code>_owner</code></strong>：若  <code>_owner</code>  为  <code>NULL</code>（锁未被持有），线程通过 ​<strong>CAS</strong>  操作尝试直接获取锁：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CAS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_owner</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> current_thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> success</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    _recursions </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 设置重入计数</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">           // 成功获取锁</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>​<strong>若当前线程是锁的持有者</strong>​（可重入），递增  <code>_recursions</code>  计数器：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_owner </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> current_thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    _recursions</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">           // 直接重入</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="​2-自旋优化-避免立即阻塞-​" tabindex="-1"><a class="header-anchor" href="#​2-自旋优化-避免立即阻塞-​"><span>​<strong>2. 自旋优化（避免立即阻塞）​</strong></span></a></h4><ul><li>线程在进入阻塞前进行短暂 ​<strong>自旋</strong>​（循环尝试 CAS），尝试在锁释放前获取锁。</li><li>​<strong>自旋条件</strong>： <ul><li>锁未被释放（<code>_owner != NULL</code>）。</li><li>未达到自旋次数限制（由 JVM 参数  <code>-XX:+UseSpinning</code>  和  <code>-XX:PreBlockSpin</code>  控制）。</li></ul></li></ul><h4 id="​3-加入竞争队列-cxq-​" tabindex="-1"><a class="header-anchor" href="#​3-加入竞争队列-cxq-​"><span>​<strong>3. 加入竞争队列（_cxq）​</strong></span></a></h4><ul><li>​<strong>封装为  <code>ObjectWaiter</code>  节点</strong>：自旋失败后，线程被封装为  <code>ObjectWaiter</code>，并插入 <code>_cxq</code>  队列头部**​（CAS 操作保证线程安全）：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ObjectWaiter</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">current_thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_next</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _cxq</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CAS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_cxq</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_next</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // CAS 失败则重试</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>​<strong>线程阻塞</strong>：通过操作系统原语（如  <code>pthread_cond_wait</code>）挂起线程，等待被唤醒。</li></ul><h4 id="​4-锁膨胀的触发条件" tabindex="-1"><a class="header-anchor" href="#​4-锁膨胀的触发条件"><span>​<strong>4. 锁膨胀的触发条件</strong></span></a></h4><ul><li>当多个线程频繁竞争同一锁时，轻量级锁会膨胀为重量级锁，关联  <code>ObjectMonitor</code>，后续竞争直接进入重量级锁流程。</li></ul><h3 id="​-释放锁流程" tabindex="-1"><a class="header-anchor" href="#​-释放锁流程"><span>​ 释放锁流程</span></a></h3><p>当线程执行完  <code>synchronized</code>  代码块并调用  <code>monitorexit</code>  时：</p><h4 id="​1-递减重入计数" tabindex="-1"><a class="header-anchor" href="#​1-递减重入计数"><span>​<strong>1. 递减重入计数</strong></span></a></h4><ul><li><p>若当前线程是锁的持有者，递减  <code>_recursions</code>  计数器：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_recursions</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">--</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_recursions </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 未完全释放锁（仍处于重入状态）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="​2-完全释放锁" tabindex="-1"><a class="header-anchor" href="#​2-完全释放锁"><span>​<strong>2. 完全释放锁</strong></span></a></h4><ul><li><p>​<strong>清空  <code>_owner</code></strong>：将  <code>_owner</code>  设为  <code>NULL</code>，表示锁已释放：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_owner </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 释放锁</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="​3-唤醒等待线程" tabindex="-1"><a class="header-anchor" href="#​3-唤醒等待线程"><span>​<strong>3. 唤醒等待线程</strong></span></a></h4><p>这里会根据策略选择直接唤醒_cxq 队列中的头部线程去竞争，或者将_cxq 队列中的线程加入_EntryList，然后再唤醒_EntryList 队列中的线程去竞争。</p><ul><li><p>​<strong>处理  <code>_cxq</code>  队列</strong>：</p><ul><li>若  <code>_cxq</code>  非空，将其所有节点一次性移动到  <code>_EntryList</code>（头插法或尾插法，取决于 JVM 实现）。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_cxq </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ObjectWaiter</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> q</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    do</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        q </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _cxq</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CAS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_cxq</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> q</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 清空 _cxq</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 将 q 附加到 _EntryList</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_EntryList </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        _EntryList </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> q</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 遍历到 _EntryList 尾部并链接 q（或头插）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>​<strong>唤醒  <code>_EntryList</code>  头部线程</strong>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_EntryList </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Thread</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> to_unlock </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _EntryList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    _EntryList </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _EntryList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_next</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    unpark</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">to_unlock</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 唤醒线程（通过操作系统原语）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>​<strong>若  <code>_EntryList</code>  为空</strong>：从  <code>_WaitSet</code>（调用  <code>wait()</code>  的线程）迁移线程到  <code>_EntryList</code>，再唤醒。</p></li></ul><h2 id="threadlocal-内存泄露" tabindex="-1"><a class="header-anchor" href="#threadlocal-内存泄露"><span>ThreadLocal 内存泄露</span></a></h2><p>https://cloud.tencent.com/developer/article/2355282</p><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h2><p>使用线程对象的 stop()方法停止线程</p><ul><li>stop 方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其它线程将永远无法获取锁 使用 System.exit(int)方法停止线程</li><li>目的仅是停止一个线程，但这种做法会让整个程序都停止</li></ul>`,75)]))}const k=i(e,[["render",t],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E6%A0%88/yjxfgcia/","title":"Java多线程","lang":"zh-CN","frontmatter":{"title":"Java多线程","createTime":"2024/11/14 10:21:26","permalink":"/技术栈/yjxfgcia/"},"headers":[],"readingTime":{"minutes":8.8,"words":2639},"git":{"updatedTime":1743517415000,"contributors":[{"name":"oyyp","email":"513150165@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/oyyp?v=4","url":"https://github.com/oyyp"}]},"filePathRelative":"notes/技术栈/Java/Java多线程.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"659f61","sort":10003,"name":"技术栈"},{"id":"8755b1","sort":10010,"name":"Java"}],"bulletin":false}');export{k as comp,r as data};
